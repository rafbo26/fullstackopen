{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","Notification","message","Button","props","type","handler","text","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","input","setInput","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteServices","initialNotes","notesToShow","filter","map","find","n","changedNote","returnedNotes","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","newNote","length","date","Date","toISOString","Math","random","concat","value","onChange","target","ReactDOM","render","document","getElementById"],"mappings":"kLAaiBA,EAXJ,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAuB,iBAC1B,OACC,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,Q,gBCPpCK,EAAU,aAiBD,EAfA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCH5BK,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAIP,qBAAKd,UAAU,QAAf,SACIc,KCFFC,EAAS,SAACC,GACd,OAAO,wBAAQC,KAAMD,EAAMC,KAAMf,QAASc,EAAME,QAAzC,SAAmDF,EAAMG,QAG5DC,EAAS,WAMb,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,2GAiFSC,EA5EH,SAACT,GAAW,IAAD,EACOU,mBAAU,IADjB,mBACbC,EADa,KACNC,EADM,OAEOF,mBAAS,IAFhB,mBAEbG,EAFa,KAENC,EAFM,OAGWJ,oBAAS,GAHpB,mBAGbK,EAHa,KAGJC,EAHI,OAIqBN,mBAAS,MAJ9B,mBAIbO,EAJa,KAICC,EAJD,KAMrBC,qBAAU,WACRC,IAEG9B,MAAK,SAAA+B,GACJT,EAASS,QAEZ,IAGH,IAwCMC,EAAcP,EAAUJ,EAAQA,EAAMY,QAAO,SAAA3C,GAAI,OAAIA,EAAKG,aAEhE,OACE,gCACE,uCACA,cAAC,EAAD,CAAce,QAASmB,IACrB,cAAC,EAAD,CAAQd,KAAMY,EAAU,iBAAmB,WAAYb,QAAS,kBAAMc,GAAYD,MACpF,6BACGO,EAAYE,KAAI,SAAA5C,GACf,OAAO,cAAC,EAAD,CAAoBA,KAAMA,EAAMC,iBAAkB,kBAhCtC,SAACc,GAC1B,IAAMf,EAAO+B,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAE/B,KAAOA,KAChCgC,EAAW,2BAAQ/C,GAAR,IAAcG,WAAYH,EAAKG,YAEhDqC,EACUzB,EAAIgC,GAAarC,MAAK,SAAAsC,GAC5BhB,EAASD,EAAMa,KAAI,SAAA5C,GAAI,OAAIA,EAAKe,KAAOA,EAAKf,EAAOgD,SAEpDC,OAAM,SAAAC,GACLZ,EAAgB,SAAD,OACJtC,EAAKK,QADD,sCAGf8C,YAAW,WACTb,EAAgB,QACf,KACHN,EAASD,EAAMY,QAAO,SAAAG,GAAC,OAAIA,EAAE/B,KAAOA,SAiB6BqC,CAAmBpD,EAAKe,MAArEf,EAAKe,SAG3B,uBAAMsC,SApDW,SAACC,GACpBA,EAAMC,iBACN,IAAMC,EAAU,CACdzC,GAAIgB,EAAM0B,OAAS,EACnBpD,QAAS4B,EACTyB,MAAM,IAAIC,MAAOC,cACjBzD,UAAW0D,KAAKC,SAAW,IAG7BtB,EACUgB,GACP9C,MAAK,SAAAsC,GACJhB,EAASD,EAAMgC,OAAOf,QAwCxB,UACE,uBAAO3B,KAAK,OAAO2C,MAAO/B,EAAOgC,SAjBd,SAACX,GACxBpB,EAASoB,EAAMY,OAAOF,UAiBlB,cAAC,EAAD,CAAQ3C,KAAK,SAASE,KAAK,YAE7B,cAAC,EAAD,Q,MCzFN4C,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6d50ed53.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n   return (\n    <li className='note'>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n   )\n  }\n\n  export default Note","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }\n","const Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  } \n\n  return (\n    <div className=\"error\">\n      { message }\n    </div>\n  )\n}\n\nexport default Notification","import React, {useEffect, useState} from 'react'\nimport Note from './components/Note'\nimport noteServices from './services/notes'\nimport Notification from './components/Notification'\n\nconst Button = (props) => {\n  return <button type={props.type} onClick={props.handler}>{props.text}</button>\n}\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, Univeristy of Helsinki 2021</em>\n    </div>\n  )\n}\n\nconst App = (props) => {\n  const [ notes, setNotes ] = useState( [] )\n  const [ input, setInput ] = useState('')\n  const [ showAll, setShowAll ] = useState(true)\n  const [ errorMessage, setErrorMessage ] = useState(null)\n  \n  useEffect(() => {\n    noteServices\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    const newNote = {\n      id: notes.length + 1,\n      content: input,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5\n    }\n\n    noteServices\n      .create(newNote)\n      .then(returnedNotes => {\n        setNotes(notes.concat(returnedNotes))\n      })\n    \n  }\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n    \n    noteServices\n      .update(id, changedNote).then(returnedNotes => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNotes))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    setInput(event.target.value)\n  }\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n        <Button text={showAll ? 'show important' : 'show all'} handler={() => setShowAll(!showAll)} />\n      <ul>\n        {notesToShow.map(note => {\n          return <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)}/>\n        })}\n      </ul>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" value={input} onChange={handleNoteChange}></input>\n        <Button type=\"submit\" text=\"save\" />\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}